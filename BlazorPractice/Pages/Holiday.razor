@page "/Holiday"
@using BlazorPractice.Data
@using BlazorPractice.Data.Crud
@using BlazorPractice.Data.Models
@using System.Net.Http
@using System.Net.Http.Json
@inject Holidata Holidata
@inject AppDbContext DbContext
@inject AdoCrud adoCrud 
@inject EntityCrud entityCrud
@inject UserModel userModel
@inject NavigationManager uriHelper


<h3>Holidays</h3>

<div>
    <label>
        <input type="radio" name="selection1" value="Holidays" @onchange="HandleSelection1"> Holidays
    </label>
    <label>
        <input type="radio" name="selection1" value="Birthdays" @onchange="HandleSelection1"> Birthdays
    </label>
</div>
@if (selectedDate == "Holidays")
{
    <p>You selected Holidays.</p>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Local Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (PublicHoliday holiday in holidays)
            {
                <tr>
                    <td>@holiday.Date</td>
                    <td>@holiday.LocalName</td>
                </tr>
            }
        </tbody>
    </table>

}
else if (selectedDate == "Birthdays")
{
    <p>You selected Birthdays.</p>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Date</th>
                <th>Function</th>
            </tr>
        </thead>
        <tbody>
            @if (GetBirthdays != null)
            {
                @foreach (User Userdd in GetBirthdays)
                {
                    <tr>
                        <td>@Userdd.ID</td>
                        <td>@Userdd.Name1</td>
                        <td>@Userdd.Datecollum.ToString("dd-MM-yyyy")</td>
                        <td><button class="btn btn-danger" @onclick="() => DeleteUser(Userdd)">Delete Date</button></td>

                    </tr>
                }
            }
        </tbody>
    </table>
}


<div>
    <label>
        <input type="radio" name="selection" value="entity-framework" @onchange="HandleSelection"> Entity Framework
    </label>
    <label>
        <input type="radio" name="selection" value="crud" @onchange="HandleSelection"> SQL Connection
    </label>
</div>
@if (selectedOption == "entity-framework" || selectedOption == "crud")
{
    <p>You selected @selectedOption</p>
    <p>Create</p>
    <form @onsubmit="CreateUser">
        <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" class="form-control" id="name" @bind="userModel.Name1" />
        </div>
        <div class="form-group">
            <label for="birthDate">Birth Date:</label>
            <input type="date" class="form-control" id="birthDate" @bind="userModel.Datecollum" />
        </div>
        <button type="submit" class="btn btn-primary">Add User</button>
    </form>

    <p>UPDATE.</p>
    <form @onsubmit="UpdateUser">
        <div class="form-group">
            <label for="id">ID:</label>
            <input type="text" class="form-control" id="id" @bind="userModel.ID" />
        </div>
        <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" class="form-control" id="name" @bind="userModel.Name1" />
        </div>
        <div class="form-group">
            <label for="birthDate">Birth Date:</label>
            <input type="date" class="form-control" id="birthDate" @bind="userModel.Datecollum" />
        </div>
        <button type="submit" class="btn btn-primary">Update User</button>
    </form>
}



@code{
    private int userID;
    private string? userName;
    private DateTime userBirthDate = DateTime.Now;

    private void CreateUser()
    {
        if (selectedOption == "entity-framework")
            entityCrud.Create(userModel);
        else if (selectedOption == "crud")
            adoCrud.Create(userModel);
    }
    private void UpdateUser()
    {
        if (selectedOption == "entity-framework")
            entityCrud.Update(userModel);
        else if (selectedOption == "crud")
            adoCrud.Update(userModel);

    }



    private async Task DeleteUser(User Userdd)
    {
        GetBirthdays.Remove(Userdd);

        BuildConnectionString nyCon = new BuildConnectionString();
        string cstring = nyCon.ConnectionString;

        using (SqlConnection connection = new SqlConnection(cstring))
        {
            connection.Open();

            string sqlQuery = $"DELETE FROM Birthday WHERE ID = {Userdd.ID}";

            using (SqlCommand command = new SqlCommand(sqlQuery, connection))
            {
                int rowsAffected = command.ExecuteNonQuery();
            }

            connection.Close();
            uriHelper.NavigateTo("/Holiday", true);
        }
    }
}

@code {
    private PublicHoliday[] holidays = new PublicHoliday[0];
    private string selectedOption = "";
    private string selectedDate = "";
    private List<User> birthdaysList = new List<User>(); // Rename the variable
    List<User> GetBirthdays = new Holidata().GetBirthdays();
    private Holidata[]? Holidatas;

    protected override async Task OnInitializedAsync()
    {
        holidays = await Holidata.HoliAsync();
    }

    private void HandleSelection(ChangeEventArgs e)
    {
        selectedOption = e.Value.ToString();
    }

    private void HandleSelection1(ChangeEventArgs e)
    {
        selectedDate = e.Value.ToString();
    }
}
